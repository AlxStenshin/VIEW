{
  "_args": [
    [
      {
        "raw": "elijahparker/gpio-button",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "elijahparker/gpio-button",
        "spec": "github:elijahparker/gpio-button",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:elijahparker/gpio-button.git",
          "sshUrl": "git+ssh://git@github.com/elijahparker/gpio-button.git",
          "httpsUrl": "git+https://github.com/elijahparker/gpio-button.git",
          "gitUrl": "git://github.com/elijahparker/gpio-button.git",
          "shortcut": "github:elijahparker/gpio-button",
          "directUrl": "https://raw.githubusercontent.com/elijahparker/gpio-button/master/package.json"
        }
      },
      "/root/VIEW"
    ]
  ],
  "_from": "elijahparker/gpio-button",
  "_id": "gpio-button@0.2.0",
  "_inCache": true,
  "_location": "/gpio-button",
  "_phantomChildren": {
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.3",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "elijahparker/gpio-button",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "elijahparker/gpio-button",
    "spec": "github:elijahparker/gpio-button",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:elijahparker/gpio-button.git",
      "sshUrl": "git+ssh://git@github.com/elijahparker/gpio-button.git",
      "httpsUrl": "git+https://github.com/elijahparker/gpio-button.git",
      "gitUrl": "git://github.com/elijahparker/gpio-button.git",
      "shortcut": "github:elijahparker/gpio-button",
      "directUrl": "https://raw.githubusercontent.com/elijahparker/gpio-button/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/elijahparker/gpio-button.git#bec1ae80aba5b2abf2feac3195fccce06f342f4d",
  "_shasum": "7d790b279098e3c13267c52f4db9120ee488155d",
  "_shrinkwrap": null,
  "_spec": "elijahparker/gpio-button",
  "_where": "/root/VIEW",
  "author": {
    "name": "fivdi"
  },
  "bugs": {
    "url": "https://github.com/fivdi/gpio-button/issues"
  },
  "dependencies": {
    "glob": "~5.0.14"
  },
  "description": "Hardware momentary push-buttons the Linux way",
  "devDependencies": {},
  "directories": {
    "example": "example",
    "test": "test"
  },
  "gitHead": "bec1ae80aba5b2abf2feac3195fccce06f342f4d",
  "homepage": "https://github.com/fivdi/gpio-button",
  "keywords": [
    "button",
    "gpio",
    "beaglebone",
    "raspberry",
    "raspi",
    "rpi",
    "pi",
    "linux"
  ],
  "license": "MIT",
  "main": "button.js",
  "name": "gpio-button",
  "optionalDependencies": {},
  "readme": "## gpio-button\n\nA JavaScript package for interfacing with hardware momentary push-buttons\nconnected to GPIO pins on Linux systems. Many Linux systems like the Raspberry\nPi have a driver called gpio-keys which can be used to emit events when\nmomentary push-buttons are pressed and released. This package conforms to the\nconventions of the gpio-keys driver and enables very efficient interfacing with\nmomentary push-buttons. The technique may appear a little complex at first, but\nwhen used, it resuts in an efficient pure JavaScript solution for momentary\npush-buttons.\n\n## Installation\n\n    $ npm install gpio-button\n\n## Usage\n\nAssume that there's a momentary push button connected to GPIO #4 on a\nRaspberry Pi:\n\n<img src=\"https://raw.githubusercontent.com/fivdi/gpio-button/master/example/button4.png\">\n\nLet's start with the complex bit, device tree overlays, after that\neverything is easy. A device tree overlay can be used to tell the Linux kernel\nabout hardware that is connected to the system, in this case, a momentary\npush-button. Once the Linux kernel knows about the device tree overlay, it\narranges everything so that the momentary push-button can be used with ease.\n\nThe device tree overlay for a hardware device is described in source code and\ncompiled into a binary format understood by the Linux kernel using the device\ntree compiler.\n\nThe source code for the momentary push-button overlay connected to GPIO #4 in\nthe circuit diagram above is:\n\n```\n/dts-v1/;\n/plugin/;\n\n/ {\n    compatible = \"brcm,bcm2835\", \"brcm,bcm2708\", \"brcm,bcm2709\";\n\n    fragment@0 {\n        target = <&gpio>;\n        __overlay__ {\n            button4_pin: button4_pin {\n                brcm,pins = <4>;     /* gpio4 */\n                brcm,function = <0>; /* input */\n                brcm,pull = <1>;     /* pull-down */\n            };\n        };\n    };\n\n    fragment@1 {\n    target-path = \"/soc\";\n        __overlay__ {\n            button4: button4 {\n                compatible = \"gpio-keys\";\n                #address-cells = <1>;\n                #size-cells = <0>;\n                pinctrl-names = \"default\";\n                pinctrl-0 = <&button4_pin>;\n                status = \"okay\";\n\n                button@4 {\n                    label = \"button gpio4\";\n                    linux,code = <4>;\n                    gpios = <&gpio 4 0>;\n                };\n            };\n        };\n    };\n};\n```\n\nBeautiful, isn't it :). The source code can also be found in\n`button4-overlay.dts` in the `example` directory.\n\nOn Raspbian, the device tree compiler is installed with the following command:\n\n```\nsudo apt-get install device-tree-compiler\n```\n\nAnd the overlay is compiled with the following command:\n\n```\ndtc -@ -I dts -O dtb -o button4-overlay.dtb button4-overlay.dts\n```\n\nThe device tree blob `button4-overlay.dtb` produced by the compiler is the\nbinary format understood by the Linux kernel and should be copied to\ndirectory `/boot/overlays`:\n\n```\nsudo cp button4-overlay.dtb /boot/overlays\n```\n\nThe last piece of the puzzle is adding the following line at the end of\n`/boot/config.txt` so that the overlay gets loaded at boot time:\n\n```\ndevice_tree_overlay=overlays/button4-overlay.dtb\n```\n\nAfter the Pi has been rebooted, the following JavaScript program can be used to\nprint information when the momentary push-button is pressed, held, or released:\n\n```js\nvar Button = require('gpio-button'),\n  button4 = new Button('button4');\n\nbutton4.on('press', function () {\n  console.log('press');\n});\n\nbutton4.on('hold', function () {\n  console.log('hold');\n});\n\nbutton4.on('release', function () {\n  console.log('release');\n});\n```\n\n## API\n\n**Button(name)**\n\nReturns a new Button object which inherits from EventEmitter. A 'ready' event\nwill be emitted when the hardware button itself is ready for user interaction.\nThe specified name is a string and and corresponds to the name of the node for\nthe button in the device tree overlay.\n\n**pressed()**\n\nReturns true if the button is pressed, else false.\n\n**held()**\n\nReturns true if the button is held, else false.\n\n**released()**\n\nReturns true if the button is released, else false.\n\n**Event: press**\n\nEmitted when the button is pressed.\n\n**Event: hold**\n\nEmitted continuously when the button is held.\n\n**Event: release**\n\nEmitted when the button is released.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fivdi/gpio-button.git"
  },
  "scripts": {
    "test": "echo \"Tests can only be run manually from the command line. They access hardware.\" && exit 1"
  },
  "version": "0.2.0"
}
